plugins {
    id 'java'
    id 'c'
}

group 'cdeler.ide'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
    mavenCentral()
}

task prebuildTreesitterLibrary(type: Exec) {
    workingDir "$projectDir/src/main/c/tree-sitter/lib"
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'cargo', 'build', '--release'
    } else {
        commandLine 'sh', '-c', "cargo build --release --target-dir $buildDir/tmp/tree-sitter-build"
    }
}

model {
    platforms {
        x64 {
            architecture "x64"
        }
    }
    tasks {
        r_tree_sitterSharedLibrary.dependsOn prebuildTreesitterLibrary
    }
    components {
        r_tree_sitter(NativeLibrarySpec) {
            sources.c {
                source {
                    srcDir "$projectDir/src/main/c/";

                    include '**/tree-sitter-ruby.c', '**/tree-sitter-ruby/src/parser.c'
                }
            }

            binaries.all {
                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-I', "${projectDir}/src/main/c/ruby-parser"
                    cCompiler.args '-I', "${projectDir}/src/main/c/tree-sitter/lib/include"
                    cCompiler.args '-I', "${projectDir}/src/main/c/tree-sitter-ruby/src/"

                    cCompiler.args '-D_FILE_OFFSET_BITS=64'

                    new File("$buildDir/tmp/tree-sitter-build").traverse(type: groovy.io.FileType.FILES) {
                        if (it.name.endsWith('libtree_sitter_highlight.a')){
                            println "Linked bynary with ${it.name}"
                            linker.args "-L${it.getAbsoluteFile().getParent()} -llibtree-sitter.a"
                        } else if (it.name.endsWith('libtree_sitter_highlight.a')){
                            linker.args "-L${it.getAbsoluteFile().getParent()} -llibtree-sitter.a"
                        }
                    }
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    cCompiler.args "-I${projectDir}/src/main/c/ruby-parser"
                    cCompiler.args "-I${projectDir}/src/main/c/tree-sitter/lib/include"
                    cCompiler.args "/MT"

                    //linker.args '/NODEFAULTLIB'
                    linker.args "${projectDir}/src/main/c/ruby-parser/tree-sitter.lib"
                }
            }
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
        }
    }
}


task copyTreesitterRubyGrammar(type: Copy) {
    from("$projectDir/src/main/c/tree-sitter-ruby")
    into("$buildDir/resources/main/tree-sitter/")
}

task copyPrebuildTreesitterBinary(type: Copy, dependsOn: ['prebuildTreesitterLibrary']) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        from("$projectDir/src/main/c/tree-sitter/target/release/tree-sitter.exe")
    } else {
        from("$projectDir/src/main/c/tree-sitter/target/release/tree-sitter")
    }

    into("$buildDir/resources/main/tree-sitter/")
}

// create a single Jar with all dependencies
// from https://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
task fatJar(type: Jar, dependsOn: ['copyTreesitterRubyGrammar', 'copyPrebuildTreesitterBinary']) {
    manifest {
        attributes 'Implementation-Title': 'RubyPit IDE',
                'Implementation-Version': version,
                'Main-Class': 'cdeler.ide.IdeMain'
    }
    baseName = project.name + '-bundle'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'
    compile group: 'org.springframework', name: 'spring-core', version: '5.1.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version: '5.1.8.RELEASE'
    compile group: 'org.scijava', name: 'native-lib-loader', version: '2.3.4'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

